{
  "fgt_googlegroups_audit_$ENV": {
    "description": "dataset for google groups",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_googlegroups_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_googlegroups_t.json",
        "deletion_protection": false,
        "description": "Keep history of Google Groups at Group id X User id granularity"
      },
      "raw_fact_googlegroupsnotderived_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_googlegroupsnotderived_t.json",
        "deletion_protection": false,
        "description": "Keep history of Google Groups at Group id X User id granularity with no inheritence"
      }
    },
    "views": {}
  },
  "fgt_data_access_audit_common_$ENV": {
    "description": "dataset storing common audit data",
    "labels": {},
    "location": "EU",
    "tables": {},
    "views": {
      "iam_details_bqressouce_x_role_x_user_v": {
        "query": "WITH   members_per_group AS (    SELECT group_email, user_email as members     FROM `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`     WHERE batch_date = (SELECT MAX(batch_date) from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`)  ),   raw_base AS (        SELECT            replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') as service,             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(resource, '/')[SAFE_OFFSET(6)] as datasets,             SPLIT(resource, '/')[SAFE_OFFSET(8)] as tables,            SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] AS user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))        AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'bigquery'        AND SPLIT(member, ':')[SAFE_OFFSET(0)] != 'deleted'    ),    primitive_roles_base AS (        SELECT             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] as user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))            AND (role in ('roles/viewer', 'roles/editor', 'roles/owner') or starts_with(role, 'roles/bigquery.'))            AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'cloudresourcemanager'        group by             SPLIT(resource, '/')[SAFE_OFFSET(4)],             SPLIT(role, '/')[SAFE_OFFSET(1)],            SPLIT(member, ':')[SAFE_OFFSET(0)],            SPLIT(member, ':')[SAFE_OFFSET(1)]    ),    formatted_primitive_roles_base AS (    SELECT          project,         role,        CASE role            WHEN 'viewer' THEN 'projectViewer'            WHEN 'editor' THEN 'projectEditor'             WHEN 'owner' THEN 'projectOwner'            ELSE role            END            AS target_role,        user_type,        user           FROM primitive_roles_base    ),    direct_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            role,            user_type,            '' as group_email,            user        FROM raw_base         WHERE (user_type = 'user' or user_type = 'serviceAccount')    ),    group_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            raw_base.role as role,            user_type,            raw_base.user as group_email,            raw_groups.members as user         FROM raw_base        INNER JOIN members_per_group as raw_groups        ON raw_groups.group_email = raw_base.user        WHERE user_type = 'group'    ),    primitive_role_access_mapping AS (        SELECT             raw_base.service as service,             raw_base.project as project,             raw_base.datasets as datasets,             raw_base.tables as tables,            formatted_primitive_roles_base.target_role as primitive_role,            CASE formatted_primitive_roles_base.role              WHEN 'projectViewer' THEN 'viewer'              WHEN 'projectEditor' THEN 'editor'               WHEN 'projectOwner' THEN 'owner'              ELSE formatted_primitive_roles_base.role            END AS role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM raw_base        INNER JOIN formatted_primitive_roles_base        ON raw_base.project = formatted_primitive_roles_base.project AND           raw_base.user_type = formatted_primitive_roles_base.target_role        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE formatted_primitive_roles_base.user_type != 'deleted'    ),    project_bq_role_access_mapping AS (        SELECT             'bigquery' as service,             formatted_primitive_roles_base.project as project,             '' as datasets,             '' as tables,            formatted_primitive_roles_base.target_role as primitive_role,            formatted_primitive_roles_base.role as role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM formatted_primitive_roles_base        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE         role not in ('owner', 'editor', 'viewer')         AND formatted_primitive_roles_base.user_type != 'deleted'    ),    all_access_mapping AS(        SELECT             service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM direct_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM group_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            primitive_role,            role,            user_type,            group_email,            user         FROM primitive_role_access_mapping        UNION ALL        SELECT             service,             project,             datasets,             NULLIF(tables, ''),            primitive_role,            role,            user_type,            group_email,            user         FROM project_bq_role_access_mapping    )           SELECT * FROM all_access_mapping",
        "deletion_protection": "false",
        "description": "Provide full overview of data access",
        "labels": {}
      },
      "groups_members_identities_details_v": {
        "query": "WITH last_time_stamp_googlegroups as(select * from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t` where insertion_date = (SELECT MAX(insertion_date) from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`)), group_details as (SELECT group_email as groupe, user_email as member, role as identity, type as member_type FROM `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`) select groupe, member, identity, member_type from group_details UNION DISTINCT SELECT group_email as groupe, user_email as member, role as identity, type as member_type from last_time_stamp_googlegroups",
        "deletion_protection": "false",
        "description": "Detail group composition",
        "labels": {}
      },
      "project_owners_types_v": {
        "query": "SELECT split(resource,'/projects/')[OFFSET(1)] as project,  split(member,':')[safe_offset(1)] as project_owner, split(member,':')[safe_offset(0)] as type FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` WHERE timestamp = (SELECT MAX(timestamp) from `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`) and resource like '%project%' and resource not like '%cloudfunctions.googleapis.com%' and role = 'roles/owner'",
        "deletion_protection": "false",
        "description": "Detail project owners",
        "labels": {}
      }
    }
  }, 
  "fgt_alldataset_iam_$ENV": {
    "description": "dataset iam policies",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_iampoliciestable_t": {
        "time_partitioning": [
          {
            "type": "DAY",
            "field": "timestamp",
            "expiration_ms": "0"
          }
        ],
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_iampoliciestable_t.json",
        "deletion_protection": false,
        "description": "Keep history of all IAM policies either with primitive roles or BQ roles"
      }
    }
  },
  "fgt_deletionaccess_hist_$ENV": {
    "description": "Historise all access modifications",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_histdeletionaccessiam_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessiam_t.json",
        "deletion_protection": false,
        "description": "Keep history of IAM accesses deleted automatically"
      },
      "raw_fact_histdeletionaccessgroups_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessgroups_t.json",
        "deletion_protection": false,
        "description": "Keep history of Group accesses deleted automatically"
      },
      "raw_fact_histdeletionaccessbq_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessbq_t.json",
        "deletion_protection": false,
        "description": "Keep history of BQ accesses deleted automatically"
      }
    }
  },
  "fgt_annuaire_audit_$ENV": {
    "description": "dataset storing info regarding annuaire",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_annuairehistiamaccesses_t": {
        "time_partitioning": [
          {
            "type": "DAY",
            "field": "ingestion_date",
            "expiration_ms": "2592000000"
          }
        ],
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_annuairehistiamaccesses_t.json",
        "deletion_protection": false
      },
      "raw_fact_annuairehistdepartures_t": {
        "time_partitioning": [
          {
            "type": "DAY",
            "field": "batch_date",
            "expiration_ms": "2592000000"
          }
        ],
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_annuairehistdepartures_t.json",
        "deletion_protection": false
      }
    }
  },
  "fgt_views_audit_$ENV": {
    "description": "dataset storing views to ops teams",
    "labels": {},
    "location": "EU",
    "tables": {}
  },
  "fgt_query_$ENV": {
    "description": "dataset storing queries",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_query_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_query_t.json",
        "deletion_protection": false
      }
    }
  },
  "fgt_data_groups_info_$ENV": {
    "description": "dataset storing data groups info",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_gestionnairedata": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_gestionnairedatagroups_t.json",
        "deletion_protection": false
      },
      "raw_fact_restrictionentities": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_restrictionentities_t.json",
        "deletion_protection": false
      },
      "raw_fact_datagroups": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_datagroups_t.json",
        "deletion_protection": false
      }
    }
  },
  "fgt_data_access_audit_arti_$ENV": {
    "description": "dataset storing ARTI audit data",
    "labels": {},
    "location": "EU",
    "tables": {
      "to_be_deleted": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessiam_t.json",
        "deletion_protection": false,
        "description": "Keep history of IAM accesses deleted automatically"
      }
    },
    "views": {
      "data_access_per_dataset_arti_v": {
        "query": "WITH   members_per_group AS (    SELECT group_email, user_email as members     FROM `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`     WHERE batch_date = (SELECT MAX(batch_date) from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`)  ),   raw_base AS (        SELECT            replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') as service,             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(resource, '/')[SAFE_OFFSET(6)] as datasets,             SPLIT(resource, '/')[SAFE_OFFSET(8)] as tables,            SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] AS user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))        AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'bigquery'        AND SPLIT(member, ':')[SAFE_OFFSET(0)] != 'deleted'    ),    primitive_roles_base AS (        SELECT             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] as user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))            AND (role in ('roles/viewer', 'roles/editor', 'roles/owner') or starts_with(role, 'roles/bigquery.'))            AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'cloudresourcemanager'        group by             SPLIT(resource, '/')[SAFE_OFFSET(4)],             SPLIT(role, '/')[SAFE_OFFSET(1)],            SPLIT(member, ':')[SAFE_OFFSET(0)],            SPLIT(member, ':')[SAFE_OFFSET(1)]    ),    formatted_primitive_roles_base AS (    SELECT          project,         role,        CASE role            WHEN 'viewer' THEN 'projectViewer'            WHEN 'editor' THEN 'projectEditor'             WHEN 'owner' THEN 'projectOwner'            ELSE role            END            AS target_role,        user_type,        user           FROM primitive_roles_base    ),    direct_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            role,            user_type,            '' as group_email,            user        FROM raw_base         WHERE (user_type = 'user' or user_type = 'serviceAccount')    ),    group_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            raw_base.role as role,            user_type,            raw_base.user as group_email,            raw_groups.members as user         FROM raw_base        INNER JOIN members_per_group as raw_groups        ON raw_groups.group_email = raw_base.user        WHERE user_type = 'group'    ),    primitive_role_access_mapping AS (        SELECT             raw_base.service as service,             raw_base.project as project,             raw_base.datasets as datasets,             raw_base.tables as tables,            formatted_primitive_roles_base.target_role as primitive_role,            CASE formatted_primitive_roles_base.role              WHEN 'projectViewer' THEN 'viewer'              WHEN 'projectEditor' THEN 'editor'               WHEN 'projectOwner' THEN 'owner'              ELSE formatted_primitive_roles_base.role            END AS role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM raw_base        INNER JOIN formatted_primitive_roles_base        ON raw_base.project = formatted_primitive_roles_base.project AND           raw_base.user_type = formatted_primitive_roles_base.target_role        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE formatted_primitive_roles_base.user_type != 'deleted'    ),    project_bq_role_access_mapping AS (        SELECT             'bigquery' as service,             formatted_primitive_roles_base.project as project,             '' as datasets,             '' as tables,            formatted_primitive_roles_base.target_role as primitive_role,            formatted_primitive_roles_base.role as role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM formatted_primitive_roles_base        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE         role not in ('owner', 'editor', 'viewer')         AND formatted_primitive_roles_base.user_type != 'deleted'    ),    iam_details_bqressouce_x_role_x_user AS(        SELECT             service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM direct_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM group_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            primitive_role,            role,            user_type,            group_email,            user         FROM primitive_role_access_mapping        UNION ALL        SELECT             service,             project,             datasets,             NULLIF(tables, ''),            primitive_role,            role,            user_type,            group_email,            user         FROM project_bq_role_access_mapping    )SELECT datasets, tables, project, user_type,group_email,user, role FROM iam_details_bqressouce_x_role_x_user WHERE  starts_with(project, 'ofr-0np')  OR  starts_with(project, 'ofr-pdb') OR  starts_with(project, 'ofr-pfu') OR  starts_with(project, 'ofr-pfg') OR  starts_with(project, 'ofr-pfd') OR  starts_with(project, 'ofr-avt') OR  starts_with(project, 'ofr-trp') OR  starts_with(project, 'ofr-aso') ORDER BY datasets",
        "deletion_protection": "false",
        "description": "View specific for the ARTI perimeter",
        "labels": {}
        
      }
    }
  },
  "fgt_data_access_audit_hubdata_$ENV": {
    "description": "dataset storing HUB DATA audit data",
    "labels": {},
    "location": "EU",
    "tables": {
      "to_be_deleted": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessiam_t.json",
        "deletion_protection": false,
        "description": "Keep history of IAM accesses deleted automatically"
      }
    },
    "views": {
      "data_access_per_dataset_hub_data_v": {
        "query": "WITH   members_per_group AS (    SELECT group_email, user_email as members     FROM `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`     WHERE batch_date = (SELECT MAX(batch_date) from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`)  ),   raw_base AS (        SELECT            replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') as service,             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(resource, '/')[SAFE_OFFSET(6)] as datasets,             SPLIT(resource, '/')[SAFE_OFFSET(8)] as tables,            SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] AS user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))        AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'bigquery'        AND SPLIT(member, ':')[SAFE_OFFSET(0)] != 'deleted'    ),    primitive_roles_base AS (        SELECT             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] as user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))            AND (role in ('roles/viewer', 'roles/editor', 'roles/owner') or starts_with(role, 'roles/bigquery.'))            AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'cloudresourcemanager'        group by             SPLIT(resource, '/')[SAFE_OFFSET(4)],             SPLIT(role, '/')[SAFE_OFFSET(1)],            SPLIT(member, ':')[SAFE_OFFSET(0)],            SPLIT(member, ':')[SAFE_OFFSET(1)]    ),    formatted_primitive_roles_base AS (    SELECT          project,         role,        CASE role            WHEN 'viewer' THEN 'projectViewer'            WHEN 'editor' THEN 'projectEditor'             WHEN 'owner' THEN 'projectOwner'            ELSE role            END            AS target_role,        user_type,        user           FROM primitive_roles_base    ),    direct_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            role,            user_type,            '' as group_email,            user        FROM raw_base         WHERE (user_type = 'user' or user_type = 'serviceAccount')    ),    group_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            raw_base.role as role,            user_type,            raw_base.user as group_email,            raw_groups.members as user         FROM raw_base        INNER JOIN members_per_group as raw_groups        ON raw_groups.group_email = raw_base.user        WHERE user_type = 'group'    ),    primitive_role_access_mapping AS (        SELECT             raw_base.service as service,             raw_base.project as project,             raw_base.datasets as datasets,             raw_base.tables as tables,            formatted_primitive_roles_base.target_role as primitive_role,            CASE formatted_primitive_roles_base.role              WHEN 'projectViewer' THEN 'viewer'              WHEN 'projectEditor' THEN 'editor'               WHEN 'projectOwner' THEN 'owner'              ELSE formatted_primitive_roles_base.role            END AS role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM raw_base        INNER JOIN formatted_primitive_roles_base        ON raw_base.project = formatted_primitive_roles_base.project AND           raw_base.user_type = formatted_primitive_roles_base.target_role        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE formatted_primitive_roles_base.user_type != 'deleted'    ),    project_bq_role_access_mapping AS (        SELECT             'bigquery' as service,             formatted_primitive_roles_base.project as project,             '' as datasets,             '' as tables,            formatted_primitive_roles_base.target_role as primitive_role,            formatted_primitive_roles_base.role as role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM formatted_primitive_roles_base        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE         role not in ('owner', 'editor', 'viewer')         AND formatted_primitive_roles_base.user_type != 'deleted'    ),    iam_details_bqressouce_x_role_x_user AS(        SELECT             service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM direct_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM group_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            primitive_role,            role,            user_type,            group_email,            user         FROM primitive_role_access_mapping        UNION ALL        SELECT             service,             project,             datasets,             NULLIF(tables, ''),            primitive_role,            role,            user_type,            group_email,            user         FROM project_bq_role_access_mapping    )SELECT datasets, tables, project, user_type,group_email,user, role FROM iam_details_bqressouce_x_role_x_user WHERE  starts_with(project, 'ofr-bdf-stor')  OR  starts_with(project, 'ofr-sde') ORDER BY datasets",
        "deletion_protection": "false",
        "description": "View specific for the HUB DATA perimeter",
        "labels": {}
      }
    }
  },
  "fgt_data_cotools_app_$ENV": {
    "description": "dataset storing custom data for Cotools APP",
    "labels": {},
    "location": "EU",
    "tables": {
      "to_be_deleted": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_histdeletionaccessiam_t.json",
        "deletion_protection": false,
        "description": "Keep history of IAM accesses deleted automatically"
      }
    },
    "views": {
      "data_access_per_group_endpoint_cotools_v": {
        "query": "WITH   members_per_group AS (    SELECT group_email, user_email as members     FROM `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`     WHERE batch_date = (SELECT MAX(batch_date) from `ofr-fgt-shared-data-$ENV.fgt_googlegroups_audit_$ENV.raw_fact_googlegroups_t`)  ),   raw_base AS (        SELECT            replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') as service,             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(resource, '/')[SAFE_OFFSET(6)] as datasets,             SPLIT(resource, '/')[SAFE_OFFSET(8)] as tables,            SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] AS user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))        AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'bigquery'        AND SPLIT(member, ':')[SAFE_OFFSET(0)] != 'deleted'    ),    primitive_roles_base AS (        SELECT             SPLIT(resource, '/')[SAFE_OFFSET(4)] as project,             SPLIT(role, '/')[SAFE_OFFSET(1)] as role,            SPLIT(member, ':')[SAFE_OFFSET(0)] as user_type,            SPLIT(member, ':')[SAFE_OFFSET(1)] as user        FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t`        WHERE timestamp = (SELECT max(timestamp) FROM `ofr-fgt-shared-data-$ENV.fgt_alldataset_iam_$ENV.raw_fact_iampoliciestable_t` where timestamp < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 15 MINUTE))            AND (role in ('roles/viewer', 'roles/editor', 'roles/owner') or starts_with(role, 'roles/bigquery.'))            AND replace(SPLIT(resource, '/')[SAFE_OFFSET(2)], '.googleapis.com', '') = 'cloudresourcemanager'        group by             SPLIT(resource, '/')[SAFE_OFFSET(4)],             SPLIT(role, '/')[SAFE_OFFSET(1)],            SPLIT(member, ':')[SAFE_OFFSET(0)],            SPLIT(member, ':')[SAFE_OFFSET(1)]    ),    formatted_primitive_roles_base AS (    SELECT          project,         role,        CASE role            WHEN 'viewer' THEN 'projectViewer'            WHEN 'editor' THEN 'projectEditor'             WHEN 'owner' THEN 'projectOwner'            ELSE role            END            AS target_role,        user_type,        user           FROM primitive_roles_base    ),    direct_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            role,            user_type,            '' as group_email,            user        FROM raw_base         WHERE (user_type = 'user' or user_type = 'serviceAccount')    ),    group_access_mapping AS (        SELECT             service,             project,             datasets,             tables,            raw_base.role as role,            user_type,            raw_base.user as group_email,            raw_groups.members as user         FROM raw_base        INNER JOIN members_per_group as raw_groups        ON raw_groups.group_email = raw_base.user        WHERE user_type = 'group'    ),    primitive_role_access_mapping AS (        SELECT             raw_base.service as service,             raw_base.project as project,             raw_base.datasets as datasets,             raw_base.tables as tables,            formatted_primitive_roles_base.target_role as primitive_role,            CASE formatted_primitive_roles_base.role              WHEN 'projectViewer' THEN 'viewer'              WHEN 'projectEditor' THEN 'editor'               WHEN 'projectOwner' THEN 'owner'              ELSE formatted_primitive_roles_base.role            END AS role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM raw_base        INNER JOIN formatted_primitive_roles_base        ON raw_base.project = formatted_primitive_roles_base.project AND           raw_base.user_type = formatted_primitive_roles_base.target_role        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE formatted_primitive_roles_base.user_type != 'deleted'    ),    project_bq_role_access_mapping AS (        SELECT             'bigquery' as service,             formatted_primitive_roles_base.project as project,             '' as datasets,             '' as tables,            formatted_primitive_roles_base.target_role as primitive_role,            formatted_primitive_roles_base.role as role,            formatted_primitive_roles_base.user_type,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN formatted_primitive_roles_base.user                ELSE ''                END                AS group_email,            CASE formatted_primitive_roles_base.user_type                WHEN 'group' THEN raw_groups.members                ELSE formatted_primitive_roles_base.user                END                AS user,        FROM formatted_primitive_roles_base        LEFT JOIN members_per_group as raw_groups        ON raw_groups.group_email = formatted_primitive_roles_base.user        WHERE         role not in ('owner', 'editor', 'viewer')         AND formatted_primitive_roles_base.user_type != 'deleted'    ),    iam_details_bqressouce_x_role_x_user AS(        SELECT             service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM direct_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            '' as primitive_role,            role,            user_type,            group_email,            user         FROM group_access_mapping        UNION ALL         SELECT service,             project,             datasets,             tables,            primitive_role,            role,            user_type,            group_email,            user         FROM primitive_role_access_mapping        UNION ALL        SELECT             service,             project,             datasets,             NULLIF(tables, ''),            primitive_role,            role,            user_type,            group_email,            user         FROM project_bq_role_access_mapping    ),    query_distinct_acess AS (        SELECT distinct(group_email||datasets||project), group_email, datasets, project, role         FROM iam_details_bqressouce_x_role_x_user         WHERE  group_email  != '' ORDER BY group_email        )         SELECT group_email, datasets, project, role FROM query_distinct_acess",
        "deletion_protection": "false",
        "description": "Distinct access for groups",
        "labels": {}
      }
    }
  },
  "fgt_allprojects_folders_$ENV": {
    "description": "dataset storing all projects with corresponding folders and labels",
    "labels": {},
    "location": "EU",
    "tables": {
      "raw_fact_projectsfolders_t": {
        "labels": {},
        "schema": "../deployment/big-query/schemas/raw_fact_projectsfolders_t.json",
        "deletion_protection": false
      }
    }
  }
}
